// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

// Since you're in demo mode/no real DB yet, use a local sqlite file.
// `prisma generate` doesn't need a DB connection, so this is fine for Vercel builds.
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  TENANT
  LANDLORD
  ADMIN
}

enum PaymentStatus {
  PENDING
  POSTED
  FAILED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(TENANT)
  createdAt DateTime @default(now())

  // credentials demo only â€” do NOT use in prod
  password  String?

  leases    Lease[]
  payments  Payment[] @relation("UserPayments")
  rewards   RewardEntry[]
}

model Property {
  id        String   @id @default(cuid())
  name      String
  address   String?
  landlord  User     @relation(fields: [landlordId], references: [id])
  landlordId String
  leases    Lease[]
  createdAt DateTime @default(now())
}

model Lease {
  id         String   @id @default(cuid())
  tenant     User     @relation(fields: [tenantId], references: [id])
  tenantId   String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  monthlyPKR Int
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime @default(now())

  payments   Payment[]
}

model Payment {
  id         String         @id @default(cuid())
  lease      Lease          @relation(fields: [leaseId], references: [id])
  leaseId    String
  user       User           @relation("UserPayments", fields: [userId], references: [id])
  userId     String
  amountPKR  Int
  status     PaymentStatus  @default(PENDING)
  reference  String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model RewardEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  points     Int
  note       String?
  createdAt  DateTime @default(now())
}
